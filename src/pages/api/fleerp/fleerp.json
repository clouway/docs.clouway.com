{
  "swagger": "2.0",
  "info": {
    "title": "Fleerp API Docs",
    "description": "Fleerp API documentation and information",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "module:Fleerp",
      "description": "Fleerp"
    }
  ],
  "host": "my.fleerp.com",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "Apikey": []
    }
  ],
  "paths": {
    "/tobjects": {
      "post": {
        "summary": "Activate new tracking object.",
        "operationId": "activateTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrackingObjectActivationRequest"
            },
            "description": "Tracking object that needs to be activated."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/TrackingObject"
            },
            "description": "The tracking object was activated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/TrackingObjectActivationError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobjects"
            ]
          }
        ]
      },
      "get": {
        "summary": "List tracking objects.",
        "operationId": "listTrackingObjects",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "type": "string",
            "required": false,
            "description": "If set, will filter tracking objects by the provided search criteria (Label, Tracking ID, MSISDN)"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TrackingObjects"
            },
            "description": "An array of tracking objects."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobjects"
            ]
          }
        ]
      }
    },
    "/tobjects#mobile": {
      "post": {
        "summary": "Activate new mobile tracking object.",
        "operationId": "activateMobileTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MobileTrackingObjectActivationRequest"
            },
            "description": "Mobile tracking object that needs to be activated."
          },
          {
            "in": "query",
            "name": "mobile",
            "type": "boolean",
            "required": true,
            "description": "If true, the endpoint activates a new mobile tracking object."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/TrackingObject"
            },
            "description": "The mobile tracking object was activated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/MobileTrackingObjectActivationError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobjects"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}": {
      "get": {
        "summary": "Get tracking object by ID.",
        "operationId": "getTrackingObjectById",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object to get."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TrackingObject"
            },
            "description": "The selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobjects"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Deactivate tracking object.",
        "operationId": "deactivateTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object to be deactivated."
          }
        ],
        "responses": {
          "204": {
            "description": "The tracking object was deactivated successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobjects"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/device_model": {
      "get": {
        "summary": "Get device model of tracking object.",
        "operationId": "getDeviceModelOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeviceModel"
            },
            "description": "Device model of the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_device_model"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/watch_device": {
      "post": {
        "summary": "Watch tracking object device.",
        "operationId": "watchTrackingObjectDevice",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeviceWatchingStatus"
            },
            "description": "Device watching status of the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_device_watch"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get tracking object device watching status.",
        "operationId": "getTrackingObjectDeviceWatchingStatus",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeviceWatchingStatus"
            },
            "description": "Device watching status of the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_device_watch"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/device_config": {
      "put": {
        "summary": "Update device configuration of tracking object.",
        "operationId": "updateDeviceConfigurationOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceConfiguration"
            },
            "description": "Device configuration that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The device configuration was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/DeviceConfigurationError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_device_config"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get device configuration of tracking object.",
        "operationId": "getDeviceConfigurationOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeviceConfiguration"
            },
            "description": "Device configuration of the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_device_config"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/oplogs": {
      "get": {
        "summary": "Get available oplogs of tracking object.",
        "operationId": "getOplogsOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Oplogs"
            },
            "description": "Oplogs of the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_oplogs"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/lpn": {
      "put": {
        "summary": "Update lpn of tracking object.",
        "operationId": "updateLpnOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LpnChangeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The lpn was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_lpn"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/label": {
      "put": {
        "summary": "Update label of tracking object.",
        "operationId": "updateLabelOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelChangeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The label was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_label"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/tracking_id": {
      "put": {
        "summary": "Update tracking id of tracking object.",
        "operationId": "updateTrackingIdOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrackingIdChangeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tracking id was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/TrackingIdChangeError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_tracking_id"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/msisdn": {
      "put": {
        "summary": "Update msisdn of tracking object.",
        "operationId": "updateMsisdnOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MsisdnChangeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The msisdn was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/MsisdnChangeError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_msisdn"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/mileage": {
      "put": {
        "summary": "Update mileage of tracking object.",
        "operationId": "updateMileageOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MileageChangeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The mileage was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/MileageChangeError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_mileage"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/description": {
      "put": {
        "summary": "Update description of tracking object.",
        "operationId": "updateDescriptionOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescriptionChangeRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The description was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_description"
            ]
          }
        ]
      }
    },
    "/tobjects/{tid}/group/{gid}": {
      "put": {
        "summary": "Assign a tracking object to given group.",
        "operationId": "assignTrackingObjectToGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tid",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "path",
            "name": "gid",
            "type": "string",
            "required": true,
            "description": "ID of the group to which will be assigned."
          }
        ],
        "responses": {
          "204": {
            "description": "The tracking object has been assigned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/TrackingObjectGroupAssignError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_group"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/routes": {
      "get": {
        "summary": "Get route of tracking object for period of time.",
        "operationId": "getTrackingObjectRoute",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired route."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired route."
          },
          {
            "in": "query",
            "name": "mindist",
            "type": "string",
            "required": false,
            "description": "If set, will include only points with provided minimal distance e.g. 5."
          },
          {
            "in": "query",
            "name": "exclude",
            "type": "string",
            "required": false,
            "description": "If set, will include only points if they contain the provided events e.g. working."
          },
          {
            "in": "query",
            "name": "timethr",
            "type": "string",
            "required": false,
            "description": "If set, will filter points by the provided time threshold e.g. 10."
          },
          {
            "in": "query",
            "name": "analogthr",
            "type": "string",
            "required": false,
            "description": "If set, will filter points by the provided analog threshold e.g. 7.5."
          },
          {
            "in": "query",
            "name": "analogdiff",
            "type": "string",
            "required": false,
            "description": "If set, will filter points by the provided threshold for AnalogResult e.g. 8.5."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TrackingObjectRoute"
            },
            "description": "Route of the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/HistoryNotFoundError"
            },
            "description": "No history found for the specified period."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_routes"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/alarms": {
      "get": {
        "summary": "Get alarms of tracking object for period of time.",
        "operationId": "getAlarmsByTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time limit of the alarms."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time limit of the alarms."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter by alarm types e.g. idling,overspeed"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Alarms"
            },
            "description": "Alarms for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarms"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/command_requests": {
      "post": {
        "summary": "Send command request to tracking object.",
        "operationId": "sendCommandRequestToTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewCommandRequest"
            },
            "description": "Command request that needs to be executed."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CommandRequest"
            },
            "description": "The command request was sent successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/CommandCreateError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:tobject_commands"
            ]
          }
        ]
      },
      "get": {
        "summary": "List command requests.",
        "operationId": "listCommandRequestsOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CommandRequests"
            },
            "description": "An array of command requests for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_commands"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/command_responses": {
      "get": {
        "summary": "List command responses.",
        "operationId": "listCommandResponsesOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CommandResponses"
            },
            "description": "Command responses for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:tobject_commands"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/alarms": {
      "get": {
        "summary": "Get alarm report of tracking object.",
        "operationId": "getAlarmReportOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired alarms report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired alarms report."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter report by types e.g. idling,overspeed"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AlarmReport"
            },
            "description": "Alarm report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarms_report"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/fuel": {
      "get": {
        "summary": "Get fuel report of tracking object.",
        "operationId": "getFuelReportOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired fuel report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired fuel report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/FuelReport"
            },
            "description": "Fuel report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:fuel_report"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/stops": {
      "get": {
        "summary": "Get stops report of tracking object.",
        "operationId": "getStopsReportOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired stops report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired stops report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StopsReport"
            },
            "description": "Stops report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:stops_report"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/usage": {
      "get": {
        "summary": "Get usage report of tracking object.",
        "operationId": "getUsageReportOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired usage report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired usage report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UsageReport"
            },
            "description": "Usage report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:usage_report"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/summary_trips": {
      "get": {
        "summary": "Get summary trips report of tracking object.",
        "operationId": "getSummaryTripsOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired summary trips report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired summary trips report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SummaryTripsReport"
            },
            "description": "Summary trips report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:trips_report"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/detailed_trips": {
      "get": {
        "summary": "Get detailed trips report of tracking object.",
        "operationId": "getDetailedTripsOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired detailed trips report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired detailed trips report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DetailedTripsReport"
            },
            "description": "Detailed trips report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:trips_report"
            ]
          }
        ]
      }
    },
    "/tobjects/{id}/reports/digital_inputs": {
      "get": {
        "summary": "Get digital inputs report of tracking object.",
        "operationId": "getDigitalInputsOfTrackingObject",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired digital inputs report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired digital inputs report."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter by input types e.g. door,working"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DigitalInputsReport"
            },
            "description": "Digital inputs report for the selected tracking object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:digital_inputs_report"
            ]
          }
        ]
      }
    },
    "/zones": {
      "post": {
        "summary": "Create new zone.",
        "operationId": "createZone",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZoneRequest"
            },
            "description": "Zone which will be created.\n  - **polygon:**\n    ```js\n      \"feature\": {\n       \"type\": \"Feature\",\n       \"properties\": {\n         \"name\": \"Veliko Tarnovo\"\n       },\n       \"geometry\": {\n        \"coordinates\": [\n         [24.764556884765625, 42.09287255461445],\n         [24.755630493164066, 42.097458173594724]\n        ],\n        \"type\": \"Polygon\"\n       }\n     }\n    ```\n  - **circle:**\n    ```js\n      \"feature\": {\n       \"type\": \"Feature\",\n       \"properties\": {\n        \"name\": \"Veliko Tarnovo\"\n       },\n       \"geometry\": {\n        \"coordinates\": [24.764556884765625, 42.09287255461445],\n        \"type\": \"Circle\"\n        \"radius\": 3314.883480616091\n       }\n     }\n    ```\n"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Zone"
            },
            "description": "The zone was created successfully.\n  - **polygon:**\n    ```js\n      {\n       \"id\": \"58d3bdb812345a47c30f0955\",\n       \"feature\": {\n         \"type\": \"Feature\",\n         \"properties\": {\n           \"name\": \"Veliko Tarnovo\"\n         },\n         \"geometry\": {\n          \"coordinates\": [\n           [24.764556884765625, 42.09287255461445],\n           [24.755630493164066, 42.097458173594724]\n          ],\n          \"type\": \"Polygon\"\n         }\n       }\n      }\n    ```\n  - **circle:**\n    ```js\n      {\n       \"id:: \"58d3bdb812345a47c30f0874\",\n       \"feature\": {\n         \"type\": \"Feature\",\n         \"properties\": {\n          \"name\": \"Veliko Tarnovo\"\n         },\n         \"geometry\": {\n          \"coordinates\": [24.764556884765625, 42.09287255461445],\n          \"type\": \"Circle\"\n          \"radius\": 3314.883480616091\n         }\n       }\n      }\n    ```\n"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ZoneCreateError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:zones"
            ]
          }
        ]
      },
      "get": {
        "summary": "List zones.",
        "operationId": "listZones",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "type": "string",
            "required": false,
            "description": "If set, will filter zones by the provided ids, divided by \",\"."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Zones"
            },
            "description": "An array of zones.\n```js\n[\n  {\n    \"id\": \"58d3bdb812342a47c30f0955\",\n    \"feature\": {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Veliko Tarnovo\"\n      },\n      \"geometry\": {\n       \"coordinates\": [\n        [24.764556884765625, 42.09287255461445],\n        [24.755630493164066, 42.097458173594724]\n       ],\n       \"type\": \"Polygon\"\n      }\n    }\n  },\n  {\n    \"id\": \"58d3bdb856442a47c30f0955\",\n    \"feature\": {\n      \"type\": \"Feature\",\n      \"properties\": {\n       \"name\": \"Veliko Tarnovo\"\n      },\n      \"geometry\": {\n       \"coordinates\": [24.764556884765625, 42.09287255461445],\n       \"type\": \"Circle\"\n       \"radius\": 3314.883480616091\n      }\n    }\n  }\n]\n```\n"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:zones"
            ]
          }
        ]
      }
    },
    "/zones/{id}": {
      "put": {
        "summary": "Update zone.",
        "operationId": "updateZone",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the zone."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZoneRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The zone was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A zone with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ZoneCreateError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:zones"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete zone.",
        "operationId": "deleteZone",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the zone."
          }
        ],
        "responses": {
          "204": {
            "description": "The zone was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A zone with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ZoneAssignedError"
            },
            "description": "Deletion of used zone will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:zones"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get zone by ID.",
        "operationId": "getZoneById",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the zone to get."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Zone"
            },
            "description": "The selected zone."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A zone with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:zones"
            ]
          }
        ]
      }
    },
    "/pois": {
      "post": {
        "summary": "Create POI.",
        "operationId": "createPOI",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POIRequest"
            },
            "description": "POI which will be created."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/POI"
            },
            "description": "The POI was created successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/POIRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:pois"
            ]
          }
        ]
      },
      "get": {
        "summary": "List POIs.",
        "operationId": "listPOIs",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "type": "string",
            "required": false,
            "description": "If set, will filter POIs by the provided ids, divided by \",\"."
          },
          {
            "in": "query",
            "name": "refs",
            "type": "string",
            "required": false,
            "description": "If set, will filter POIs by the provided refs"
          },
          {
            "in": "query",
            "name": "tags",
            "type": "string",
            "required": false,
            "description": "If set, will filter POIs by the provided tags (e.g. school,hospital)"
          },
          {
            "in": "query",
            "name": "northeast",
            "type": "string",
            "format": "geo coordinates - lat,lng",
            "required": false,
            "description": "Combines with southwest, if set will fetch POIs in the provided geo rectangle"
          },
          {
            "in": "query",
            "name": "southwest",
            "type": "string",
            "format": "geo coordinates - lat,lng",
            "required": false,
            "description": "Combines with northeast, if set will fetch POIs in the provided geo rectangle"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/POIs"
            },
            "description": "An array of all POIs."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:pois"
            ]
          }
        ]
      }
    },
    "/pois/{id}": {
      "put": {
        "summary": "Update POI.",
        "operationId": "updatePOI",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the POI."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POIRequest"
            },
            "description": "POI that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The POI was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A POI with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/POIRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:pois"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete POI.",
        "operationId": "deletePOI",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the POI."
          }
        ],
        "responses": {
          "204": {
            "description": "The POI was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A POI with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:pois"
            ]
          }
        ]
      }
    },
    "/pois/import": {
      "post": {
        "summary": "Import POIs from a file.",
        "operationId": "importPOIs",
        "tags": [
          "admin"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "poiFile",
            "type": "file",
            "description": "The GeoJSON file to import."
          }
        ],
        "responses": {
          "200": {
            "description": "The POIs was imported successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "413": {
            "schema": {
              "$ref": "#/definitions/RequestEntityTooLargeError"
            },
            "description": "Request entity is larger than limits defined by server."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/POIRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:pois"
            ]
          }
        ]
      }
    },
    "/groups": {
      "post": {
        "summary": "Create group.",
        "operationId": "createGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Group"
            },
            "description": "The group was created successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/GroupCreateError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:groups"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get all groups.",
        "operationId": "getAllGroups",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GroupTree"
            },
            "description": "An array of all groups."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:groups"
            ]
          }
        ]
      }
    },
    "/groups#roots": {
      "get": {
        "summary": "Get root groups.",
        "operationId": "getRootGroups",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "roots",
            "type": "boolean",
            "required": true,
            "description": "If set, the endpoint will list root group"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UnorderedGroups"
            },
            "description": "An array of root groups."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:groups"
            ]
          }
        ]
      }
    },
    "/groups#by_parent": {
      "get": {
        "summary": "Get groups by parent.",
        "operationId": "getGroupsByParent",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parent",
            "type": "string",
            "required": true,
            "description": "If set, the endpoint will list groups by parent id"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UnorderedGroups"
            },
            "description": "An array of groups."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:groups"
            ]
          }
        ]
      }
    },
    "/groups/{id}": {
      "put": {
        "summary": "Update group.",
        "operationId": "updateGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateGroupRequest"
            },
            "description": "Group that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The group was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A group with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/GroupUpdateError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:groups"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete group.",
        "operationId": "deleteGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          }
        ],
        "responses": {
          "204": {
            "description": "The group was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A group with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/GroupDeleteError"
            },
            "description": "Deletion of group with children will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:groups"
            ]
          }
        ]
      }
    },
    "/groups/{id}/alarms": {
      "get": {
        "summary": "Get alarms by group.",
        "operationId": "getAlarmsByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired alarms."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired alarms."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter by alarm types e.g. idling,overspeed"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Alarms"
            },
            "description": "An array of alarms."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarms"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/alarms": {
      "get": {
        "summary": "Get alarm report by group.",
        "operationId": "getAlarmReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired alarms report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired alarms report."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter report by types e.g. idling,overspeed"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AlarmReportByGroup"
            },
            "description": "Alarms report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarms_report"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/fuel": {
      "get": {
        "summary": "Get fuel report by group.",
        "operationId": "getFuelReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired fuel report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired fuel report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/FuelReportByGroup"
            },
            "description": "Fuel report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:fuel_report"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/stops": {
      "get": {
        "summary": "Get stops report by group.",
        "operationId": "getStopsReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired stops report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired stops report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StopsReportByGroup"
            },
            "description": "Stops report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:stops_report"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/usage": {
      "get": {
        "summary": "Get usage report by group.",
        "operationId": "getUsageReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired usage report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired usage report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UsageReportByGroup"
            },
            "description": "Usage report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:usage_report"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/summary_trips": {
      "get": {
        "summary": "Get summary trips report by group.",
        "operationId": "getSummaryTripsReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired summary trips report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired summary trips report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SummaryTripsReportByGroup"
            },
            "description": "Summary trips report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:trips_report"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/detailed_trips": {
      "get": {
        "summary": "Get detailed trips report by group.",
        "operationId": "getDetailedTripsReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired detailed trips report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired detailed trips report."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DetailedTripsReportByGroup"
            },
            "description": "Detailed trips report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:trips_report"
            ]
          }
        ]
      }
    },
    "/groups/{id}/reports/digital_inputs": {
      "get": {
        "summary": "Get digital inputs report by group.",
        "operationId": "getDigitalInputsReportByGroup",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the group object."
          },
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired digital inputs report."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired digital inputs report."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter by input types e.g. door,working"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DigitalInputsReportByGroup"
            },
            "description": "Digital inputs report for the selected group."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:digital_inputs_report"
            ]
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List users.",
        "operationId": "listUsers",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Users"
            },
            "description": "An array of users."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:users"
            ]
          }
        ]
      }
    },
    "/users/:id/groups": {
      "put": {
        "summary": "Assign a user to groups.",
        "operationId": "assignUserToGroups",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the user."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupAssignRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The groups of the user was successfully assigned."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/UserGroupAssignError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:users"
            ]
          }
        ]
      }
    },
    "/user_configs/map_configs": {
      "put": {
        "summary": "Update map configs.",
        "operationId": "updateMapConfigs",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMapConfigsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The map configs has been successfuly updated."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/UpdateMapConfigsError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:user_configs"
            ]
          }
        ]
      }
    },
    "/drivers": {
      "post": {
        "summary": "Create driver.",
        "operationId": "createDriver",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DriverRequest"
            },
            "description": "Driver which will be created."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/DriverResponse"
            },
            "description": "The driver was created successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/DriverRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:drivers"
            ]
          }
        ]
      },
      "get": {
        "summary": "List drivers.",
        "operationId": "listDrivers",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Drivers"
            },
            "description": "An array of all drivers."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:drivers"
            ]
          }
        ]
      }
    },
    "/drivers/{id}": {
      "put": {
        "summary": "Update driver.",
        "operationId": "updateDriver",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the driver."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DriverRequest"
            },
            "description": "Driver that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The driver was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A driver with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/DriverRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:drivers"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete driver.",
        "operationId": "deleteDriver",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the driver."
          }
        ],
        "responses": {
          "204": {
            "description": "The driver was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A driver with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:drivers"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get driver by ID.",
        "operationId": "getDriverByID",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the driver to get."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DriverResponse"
            },
            "description": "The selected driver object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A driver with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:drivers"
            ]
          }
        ]
      }
    },
    "/maintenance_tasks": {
      "post": {
        "summary": "Create maintenance task.",
        "operationId": "createMaintenanceTask",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceTaskRequest"
            },
            "description": "Maintenance task which will be created."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/MaintenanceTask"
            },
            "description": "The maintenance task was created successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/MaintenanceTaskRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:maintenance_tasks"
            ]
          }
        ]
      },
      "get": {
        "summary": "List maintenance tasks.",
        "operationId": "listMaintenanceTasks",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MaintenanceTasks"
            },
            "description": "An array of all maintenance tasks."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:maintenance_tasks"
            ]
          }
        ]
      }
    },
    "/maintenance_tasks/{id}": {
      "put": {
        "summary": "Update maintenance task.",
        "operationId": "updateMaintenanceTask",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the maintenance task."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenanceTaskRequest"
            },
            "description": "Maintenance task that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The maintenance task was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A maintenance task with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/MaintenanceTaskRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:maintenance_tasks"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete maintenance task.",
        "operationId": "deleteMaintenanceTask",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the maintenance task."
          }
        ],
        "responses": {
          "204": {
            "description": "The maintenance task was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A maintenance task with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:maintenance_tasks"
            ]
          }
        ]
      }
    },
    "/config_templates": {
      "post": {
        "summary": "Create config template.",
        "operationId": "createConfigTemplate",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigTemplateRequest"
            },
            "description": "Config template which will be created."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/ConfigTemplate"
            },
            "description": "The config template was created successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ConfigTemplateRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:config_templates"
            ]
          }
        ]
      },
      "get": {
        "summary": "List config templates.",
        "operationId": "listConfigTemplates",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ConfigTemplates"
            },
            "description": "An array of all config template."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:config_templates"
            ]
          }
        ]
      }
    },
    "/config_templates/{id}": {
      "put": {
        "summary": "Update config template.",
        "operationId": "updateConfigTemplate",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the config template."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigTemplateRequest"
            },
            "description": "Config template that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The config template was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A config template with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ConfigTemplateRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:config_templates"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete config template.",
        "operationId": "deleteConfigTemplate",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the config template."
          }
        ],
        "responses": {
          "204": {
            "description": "The config template was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A config template with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:config_templates"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get config template by ID.",
        "operationId": "getConfigTemplateByID",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the config template to get."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ConfigTemplate"
            },
            "description": "The selected config template object."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A config template with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:config_templates"
            ]
          }
        ]
      }
    },
    "/alarms": {
      "get": {
        "summary": "Get alarms for period of time.",
        "operationId": "getAlarms",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time limit of the alarms."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time limit of the alarms."
          },
          {
            "in": "query",
            "name": "types",
            "type": "string",
            "required": false,
            "description": "If set, will filter by alarm types e.g. idling,overspeed"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Alarms"
            },
            "description": "Alarms for the selected period."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarms"
            ]
          }
        ]
      }
    },
    "/alarms/{id}": {
      "get": {
        "summary": "Get alarm by ID.",
        "operationId": "getAlarmById",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm to get."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Alarm"
            },
            "description": "The selected alarm."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarms"
            ]
          }
        ]
      }
    },
    "/alarms/{id}/handle": {
      "put": {
        "summary": "Handle alarm.",
        "operationId": "handleAlarm",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm."
          }
        ],
        "responses": {
          "204": {
            "description": "The alarm was handled successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:alarms"
            ]
          }
        ]
      }
    },
    "/settings/alarms": {
      "post": {
        "summary": "Create alarm config.",
        "operationId": "createAlarmConfig",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlarmConfigRequest"
            },
            "description": "Alarm config which will be created."
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/AlarmConfigResponse"
            },
            "description": "The alarm config was created successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/AlarmConfigRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:alarm_configs"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get alarm configs.",
        "operationId": "getAlarmConfigs",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AlarmConfigs"
            },
            "description": "An array of alarm configs."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarm_configs"
            ]
          }
        ]
      }
    },
    "/settings/alarms/{id}": {
      "put": {
        "summary": "Update alarm config.",
        "operationId": "updateAlarmConfig",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm config."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlarmConfigRequest"
            },
            "description": "Alarm config that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The alarm config was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm config with the specified ID was not found."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/AlarmConfigRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:alarm_configs"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete alarm config.",
        "operationId": "deleteAlarmConfig",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm config."
          }
        ],
        "responses": {
          "204": {
            "description": "The alarm config was deleted successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm config with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:alarm_configs"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get alarm config by ID.",
        "operationId": "getAlarmConfigByID",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm config to get."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AlarmConfig"
            },
            "description": "The selected alarm config."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm config with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:alarm_configs"
            ]
          }
        ]
      }
    },
    "/settings/alarms/{id}/suspend": {
      "put": {
        "summary": "Suspend alarm config.",
        "operationId": "suspendAlarmConfig",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm config."
          }
        ],
        "responses": {
          "204": {
            "description": "The alarm config was suspended successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm config with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:alarm_configs"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Activate alarm config.",
        "operationId": "activateAlarmConfig",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the alarm config."
          }
        ],
        "responses": {
          "204": {
            "description": "The alarm config was activated successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "An alarm config with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:alarm_configs"
            ]
          }
        ]
      }
    },
    "/settings/account/workweek": {
      "put": {
        "summary": "Save workweek.",
        "operationId": "saveWorkweek",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workweek"
            },
            "description": "Workweek that needs to be saved."
          }
        ],
        "responses": {
          "204": {
            "description": "The workweek was saved successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/WorkweekRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:account_workweek"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get workweek.",
        "operationId": "getWorkweek",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Workweek"
            },
            "description": "The defined workweek."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:account_workweek"
            ]
          }
        ]
      }
    },
    "/settings/account/ecodriving_config": {
      "put": {
        "summary": "Save ecodriving config.",
        "operationId": "saveEcodrivingConfig",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EcodrivingConfig"
            },
            "description": "EcodrivingConfig that needs to be saved."
          }
        ],
        "responses": {
          "204": {
            "description": "The ecodriving config was saved successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/EcodrivingConfigRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:account_ecodriving_config"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get ecodriving config.",
        "operationId": "getEcodrivingConfig",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EcodrivingConfig"
            },
            "description": "The defined ecodriving config."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:account_ecodriving_config"
            ]
          }
        ]
      }
    },
    "/device_vendors": {
      "get": {
        "summary": "Get device vendors.",
        "operationId": "getDeviceVendors",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeviceVendors"
            },
            "description": "An array of device vendors."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:device_vendors"
            ]
          }
        ]
      }
    },
    "/device_vendors/{vid}/models": {
      "get": {
        "summary": "Get device models by vendor.",
        "operationId": "getDeviceModelsByVendor",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vid",
            "type": "string",
            "required": true,
            "description": "ID of the vendor."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeviceModels"
            },
            "description": "An array of device models."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:device_models"
            ]
          }
        ]
      }
    },
    "/device_vendors/{vid}/models/{mid}/primary_configuration": {
      "get": {
        "summary": "Get primary device configuration.",
        "operationId": "getPrimaryDeviceConfiguration",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vid",
            "type": "string",
            "required": true,
            "description": "ID of the vendor."
          },
          {
            "in": "path",
            "name": "mid",
            "type": "string",
            "required": true,
            "description": "ID of the model."
          },
          {
            "in": "query",
            "name": "apn",
            "type": "string",
            "required": true,
            "description": "APN domain"
          },
          {
            "in": "query",
            "name": "user",
            "type": "string",
            "required": true,
            "description": "APN user"
          },
          {
            "in": "query",
            "name": "pass",
            "type": "string",
            "required": true,
            "description": "APN password"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PrimaryDeviceConfigurations"
            },
            "description": "An array of primary device configurations."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:device_primary_configuration"
            ]
          }
        ]
      }
    },
    "/vehicle_types": {
      "get": {
        "summary": "Get vehicle types.",
        "operationId": "getVehicleTypes",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VehicleTypes"
            },
            "description": "An array of vehicle types."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:vehicle_types"
            ]
          }
        ]
      }
    },
    "/vehicle_types/{type}/manufacturers": {
      "get": {
        "summary": "Get vehicle manufacturers.",
        "operationId": "getVehicleManufacturers",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "type": "string",
            "required": true,
            "description": "Type of the vehicle."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VehicleManufacturers"
            },
            "description": "An array of vehicle manufacturers."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:vehicle_manufacturers"
            ]
          }
        ]
      }
    },
    "/vehicle_types/{type}/manufacturers/{name}/models": {
      "get": {
        "summary": "Get vehicle models.",
        "operationId": "getVehicleModels",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "type": "string",
            "required": true,
            "description": "Type of the vehicle."
          },
          {
            "in": "path",
            "name": "name",
            "type": "string",
            "required": true,
            "description": "Name of the manufacturer."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VehicleModels"
            },
            "description": "An array of vehicle models."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:vehicle_models"
            ]
          }
        ]
      }
    },
    "/mobile_carriers": {
      "get": {
        "summary": "Search for mobile carriers.",
        "operationId": "getMobileCarriers",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "type": "string",
            "required": true,
            "description": "Search criterion."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MobileCarriers"
            },
            "description": "An array of mobile carriers."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:mobile_carriers"
            ]
          }
        ]
      }
    },
    "/external_services/big_query": {
      "put": {
        "summary": "Update big query credentials.",
        "operationId": "updateBigQueryCredentials",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BigQueryCredentials"
            },
            "description": "Credentials that needs to be updated."
          }
        ],
        "responses": {
          "204": {
            "description": "The big query credentials was updated successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/BigQueryCredentialsError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:big_query_credentials"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get big query credentials.",
        "operationId": "getBigQueryCredentials",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BigQueryCredentials"
            },
            "description": "The big query credentials."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:big_query_credentials"
            ]
          }
        ]
      }
    },
    "/ecodriving": {
      "get": {
        "summary": "Get ecodriving ratings.",
        "operationId": "getEcodrivingRatings",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "Start time for the desired ecodriving rating."
          },
          {
            "in": "query",
            "name": "end",
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "End time for the desired ecodriving rating."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/EcodrivingRatings"
            },
            "description": "Calculated ecodriving ratings."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:ecodriving"
            ]
          }
        ]
      }
    },
    "/invitations/trackers/mobile": {
      "post": {
        "summary": "Send invitation for mobile app.",
        "operationId": "sendInvitationForMobileApp",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MobileTrackerInvitationRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The invitation was sent successfully."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/JsonSyntaxError"
            },
            "description": "Bad request. Provided json content is malformed."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/MobileTrackerInvitationRequestError"
            },
            "description": "Sending invalid fields will result in a Unprocessable Entity response."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:mobile_trackers_invitations"
            ]
          }
        ]
      }
    },
    "/search": {
      "get": {
        "summary": "Get suggestions from search engine.",
        "operationId": "getSuggestionsFromSearchEngine",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "type": "string",
            "required": true,
            "description": "Search criterion."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "number",
            "required": true,
            "description": "The maximum number of suggestions that can be returned."
          },
          {
            "in": "query",
            "name": "geocoding",
            "type": "boolean",
            "required": false,
            "description": "If set, the endpoint will search for geocoding suggestions."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SearchEngineSuggestions"
            },
            "description": "Search suggestions returned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:search_engine_suggestions"
            ]
          }
        ]
      }
    },
    "/search/tobject/{id}": {
      "get": {
        "summary": "Get tracking object related result from search engine.",
        "operationId": "getTobjectResultFromSearchEngine",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the tracking object."
          },
          {
            "in": "query",
            "name": "radius",
            "type": "string",
            "format": "float",
            "required": true,
            "description": "Radius around tobject for fetching additional resources."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SearchEngineResult"
            },
            "description": "Search result returned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:search_engine_tobject_result"
            ]
          }
        ]
      }
    },
    "/search/poi/{id}": {
      "get": {
        "summary": "Get POI related result from search engine.",
        "operationId": "getPOIResultFromSearchEngine",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the POI."
          },
          {
            "in": "query",
            "name": "radius",
            "type": "string",
            "format": "float",
            "required": true,
            "description": "Radius around POI for fetching additional resources."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SearchEngineResult"
            },
            "description": "Search result returned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:search_engine_poi_result"
            ]
          }
        ]
      }
    },
    "/search/zone/{id}": {
      "get": {
        "summary": "Get zone related result from search engine.",
        "operationId": "getZoneResultFromSearchEngine",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the zone."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SearchEngineResult"
            },
            "description": "Search result returned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A zone with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:search_engine_zone_result"
            ]
          }
        ]
      }
    },
    "/search/driver/{id}": {
      "get": {
        "summary": "Get driver related result from search engine.",
        "operationId": "getDriverResultFromSearchEngine",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the driver."
          },
          {
            "in": "query",
            "name": "radius",
            "type": "string",
            "format": "float",
            "required": true,
            "description": "Radius around driver(tobject) for fetching additional resources."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SearchEngineResult"
            },
            "description": "Search result returned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A tracking object with the specified driver ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:search_engine_driver_result"
            ]
          }
        ]
      }
    },
    "/search/geocoding/{id}": {
      "get": {
        "summary": "Get geocoding related result from search engine.",
        "operationId": "getGeocodingResultFromSearchEngine",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "ID of the location."
          },
          {
            "in": "query",
            "name": "radius",
            "type": "string",
            "format": "float",
            "required": false,
            "description": "Radius around location for fetching additional resources."
          },
          {
            "in": "query",
            "name": "simple",
            "type": "boolean",
            "required": false,
            "description": "If set, the endpoint will return only location prop."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SearchEngineResult"
            },
            "description": "Search result returned successfully."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/AuthorizationError"
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            },
            "description": "A location with the specified ID was not found."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:search_engine_geocoding_result"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Apikey": {
      "type": "apiKey",
      "in": "header",
      "name": "x-authenticity-token"
    },
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://accounts.telcong.com/o/oauth2/v1/auth",
      "tokenUrl": "https://accounts.telcong.com/o/oauth2/v1/token",
      "scopes": {
        "read:tobjects": "Grants read access to tracking objects",
        "write:tobjects": "Grants access for activation of new tracking object",
        "read:tobject_device_model": "Grants read access to tobject device model",
        "read:tobject_device_watch": "Grants read access to tobject device watch status",
        "write:tobject_device_watch": "Grants access to watch tobject device",
        "read:tobject_device_config": "Grants read access to tobject device config",
        "write:tobject_device_config": "Grants write access to tobject device config",
        "read:tobject_oplogs": "Grants read access to tobject oplogs",
        "write:tobject_lpn": "Grants write access to tobject lpn",
        "write:tobject_label": "Grants write access to tobject label",
        "write:tobject_tracking_id": "Grants write access to tobject trackingId",
        "write:tobject_msisdn": "Grants write access to tobject msisdn",
        "write:tobject_mileage": "Grants write access to tobject mileage",
        "write:tobject_description": "Grants write access to tobject description",
        "write:tobject_group": "Grants access for assigning a tobject to group",
        "read:tobject_routes": "Grants read access to tobject routes",
        "read:tobject_commands": "Grants read access to tobject commands",
        "write:tobject_commands": "Grants access for sending commands to tobject device",
        "read:alarms_report": "Grants read access to alarms report",
        "read:fuel_report": "Grants read access to fuel report",
        "read:stops_report": "Grants read access to stops report",
        "read:usage_report": "Grants read access to usage report",
        "read:trips_report": "Grants read access to trips report",
        "read:digital_inputs_report": "Grants read access to digital inputs report",
        "read:pois": "Grants read access to POIs",
        "write:pois": "Grants write access to POIs",
        "read:zones": "Grants read access to zones",
        "write:zones": "Grants write access to zones",
        "read:groups": "Grants read access to groups",
        "write:groups": "Grants write access to groups",
        "read:users": "Grants read access to users",
        "write:users": "Grants write access to users",
        "write:user_configs": "Grants write access to user_configs",
        "read:drivers": "Grants read access to drivers",
        "write:drivers": "Grants write access to drivers",
        "read:maintenance_tasks": "Grants read access to maintenance tasks",
        "write:maintenance_tasks": "Grants write access to maintenance tasks",
        "read:config_templates": "Grants read access to config templates",
        "write:config_templates": "Grants write access to config templates",
        "read:alarms": "Grants read access to alarms",
        "write:alarms": "Grants write access to alarms",
        "read:alarm_configs": "Grants read access to alarm configs",
        "write:alarm_configs": "Grants write access to alarm configs",
        "read:account_workweek": "Grants read access to account workweek",
        "write:account_workweek": "Grants write access to account workweek",
        "read:account_ecodriving_config": "Grants read access to account ecodriving config",
        "write:account_ecodriving_config": "Grants write access to account ecodriving config",
        "read:device_vendors": "Grants read access to device vendors",
        "read:device_models": "Grants read access to device models",
        "read:device_primary_configuration": "Grants read access to device primary configuration",
        "read:vehicle_types": "Grants read access to vehicle types",
        "read:vehicle_manufacturers": "Grants read access to vehicle manufacturers",
        "read:vehicle_models": "Grants read access to vehicle models",
        "read:mobile_carriers": "Grants read access to mobile carriers",
        "read:ecodriving": "Grants read access to ecodriving report",
        "read:big_query_credentials": "Grants read access to big query credentials",
        "write:big_query_credentials": "Grants write access to big query credentials",
        "write:mobile_trackers_invitations": "Grants invite access for mobile tracker installation",
        "read:search_engine_suggestions": "Grants read access to search engine suggestions",
        "read:search_engine_tobject_result": "Grants read access to search engine tobject related result",
        "read:search_engine_poi_result": "Grants read access to search engine POI related result",
        "read:search_engine_zone_result": "Grants read access to search engine zone related result",
        "read:search_engine_driver_result": "Grants read access to search engine driver related result",
        "read:search_engine_geocoding_result": "Grants read access to search engine geocoding related result"
      }
    }
  },
  "definitions": {
    "TrackingObjectDescription": {
      "additionalProperties": {
        "type": "array",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number",
            "format": "double"
          }
        ]
      },
      "example": {
        "manufacturer": "Audi",
        "model": "A4",
        "weight": 1645
      }
    },
    "TrackingObjectActivationRequest": {
      "required": [
        "lpn",
        "label",
        "type",
        "trackingId",
        "msisdn",
        "deviceModel"
      ],
      "properties": {
        "lpn": {
          "type": "string",
          "example": "BT1234KK"
        },
        "label": {
          "type": "string",
          "example": "BT1234KK"
        },
        "type": {
          "type": "string",
          "example": {
            "oneOf": [
              "iot",
              "mobile",
              "vehicle"
            ]
          }
        },
        "trackingId": {
          "type": "string",
          "example": "356307048655392"
        },
        "msisdn": {
          "type": "string",
          "example": "359123456789"
        },
        "deviceModel": {
          "type": "string",
          "example": "218"
        },
        "gprsSettings": {
          "properties": {
            "apn": {
              "type": "string",
              "example": "internet.vivacom.bg"
            },
            "username": {
              "type": "string",
              "example": "VIVACOM"
            },
            "password": {
              "type": "string",
              "example": "VIVACOM"
            }
          }
        }
      }
    },
    "MobileTrackingObjectActivationRequest": {
      "required": [
        "label",
        "deviceId"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": "BT1234KK"
        },
        "deviceId": {
          "type": "string",
          "example": "356307048655392"
        },
        "msisdn": {
          "type": "string",
          "example": "359123456789"
        }
      }
    },
    "LpnChangeRequest": {
      "required": [
        "lpn"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": "BT1234BT"
        }
      }
    },
    "LabelChangeRequest": {
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": "BT1234BT"
        }
      }
    },
    "TrackingIdChangeRequest": {
      "required": [
        "trackingId"
      ],
      "properties": {
        "trackingId": {
          "type": "string",
          "example": "356307048655392"
        }
      }
    },
    "MsisdnChangeRequest": {
      "required": [
        "msisdn"
      ],
      "properties": {
        "msisdn": {
          "type": "string",
          "example": "359123456789"
        }
      }
    },
    "MileageChangeRequest": {
      "required": [
        "mileage"
      ],
      "properties": {
        "mileage": {
          "type": "integer",
          "format": "int64",
          "example": 212431542
        }
      }
    },
    "DescriptionChangeRequest": {
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "$ref": "#/definitions/TrackingObjectDescription"
        }
      }
    },
    "TrackingObject": {
      "properties": {
        "id": {
          "type": "string",
          "example": "593a9c4dafc78c57a8149fd6"
        },
        "cid": {
          "type": "string",
          "example": "5749328048029696"
        },
        "type": {
          "type": "string",
          "example": {
            "oneOf": [
              "iot",
              "mobile",
              "vehicle"
            ]
          }
        },
        "description": {
          "$ref": "#/definitions/TrackingObjectDescription"
        },
        "lpn": {
          "type": "string",
          "example": "BT1234KK"
        },
        "label": {
          "type": "string",
          "example": "BT1234KK"
        },
        "trackingId": {
          "type": "string",
          "example": "356307048655392"
        },
        "msisdn": {
          "type": "string",
          "example": "359123456789"
        },
        "slopes": {
          "$ref": "#/definitions/Slopes"
        },
        "driver": {
          "$ref": "#/definitions/Driver"
        },
        "mileage": {
          "type": "integer",
          "format": "int64",
          "example": 212431542
        },
        "groupId": {
          "type": "string",
          "example": "596f4a8a78882a5280601617"
        },
        "groupPath": {
          "$ref": "#/definitions/GroupIDs"
        },
        "lastPoint": {
          "$ref": "#/definitions/Point"
        },
        "lastMove": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "lastStop": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "lastIgnition": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "lastIgnitionOff": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "inventoryId": {
          "type": "string",
          "example": "59410f6862a048b5e6aee1c4"
        },
        "deviceModelId": {
          "type": "string",
          "example": "218"
        }
      }
    },
    "TrackingObjects": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TrackingObject"
      }
    },
    "TrackingObjectIDs": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "593a9c4dafc78c57a8149fd6",
        "59a3ccb878882a4338922741"
      ]
    },
    "Slopes": {
      "type": "array",
      "items": {
        "type": "number",
        "format": "double"
      },
      "example": [
        6.34,
        6.34,
        0,
        21.03,
        0,
        2.81,
        15.25
      ]
    },
    "Driver": {
      "properties": {
        "id": {
          "type": "string",
          "example": "599bc11c78882a0ed751a622"
        },
        "cid": {
          "type": "string",
          "example": "5749328048029696"
        },
        "firstName": {
          "type": "string",
          "example": "Ivan"
        },
        "lastName": {
          "type": "string",
          "example": "Stefanov"
        },
        "tokens": {
          "$ref": "#/definitions/AuthTokens"
        },
        "groups": {
          "$ref": "#/definitions/GroupIDs"
        },
        "tObjects": {
          "$ref": "#/definitions/TrackingObjectIDs"
        }
      }
    },
    "AuthTokens": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "A80051A204",
        "A80051A205",
        "A80051A206"
      ]
    },
    "GroupIDs": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "596f4a8a78882a5280601617",
        "59a3cd7a78882a4338922749"
      ]
    },
    "Point": {
      "properties": {
        "id": {
          "type": "string",
          "example": "59c8b46086597a0d6d19bb1f/1518070629000000000/0"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "lost": {
          "type": "boolean",
          "example": false
        },
        "dist": {
          "type": "integer",
          "format": "int32",
          "example": 1500
        },
        "speed": {
          "type": "integer",
          "format": "int32",
          "example": 110
        },
        "mileage": {
          "type": "integer",
          "format": "int64",
          "example": 212431542
        },
        "heading": {
          "type": "number",
          "format": "double",
          "example": 95.62987054680893
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "altitude": {
          "type": "integer",
          "format": "int32",
          "example": 241
        },
        "satellites": {
          "type": "integer",
          "format": "int32",
          "example": 15
        },
        "address": {
          "type": "string",
          "example": "1400 Spur Highway, Kenai, Alaska 66911"
        },
        "analogs": {
          "$ref": "#/definitions/AnalogResult"
        },
        "authToken": {
          "type": "string",
          "example": "A80051A204"
        },
        "motionDetected": {
          "type": "boolean",
          "example": true
        },
        "driverName": {
          "type": "string",
          "example": "Ivan Stefanov"
        },
        "latestEvents": {
          "$ref": "#/definitions/Events"
        },
        "activeEvents": {
          "$ref": "#/definitions/Events"
        },
        "accelerometer": {
          "$ref": "#/definitions/Accelerometer"
        },
        "digitalInputs": {
          "$ref": "#/definitions/DigitalPorts"
        },
        "digitalOutputs": {
          "$ref": "#/definitions/DigitalPorts"
        }
      }
    },
    "TrackingObjectRoute": {
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Point"
          }
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        }
      }
    },
    "Location": {
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "example": 43.074705
        },
        "lng": {
          "type": "number",
          "format": "double",
          "example": 25.616841
        }
      }
    },
    "Events": {
      "additionalProperties": {
        "type": "boolean"
      },
      "example": {
        "door": false,
        "working": true
      }
    },
    "DigitalPorts": {
      "type": "array",
      "items": {
        "type": "boolean"
      },
      "example": [
        true,
        false,
        true,
        false
      ]
    },
    "AnalogResult": {
      "additionalProperties": {
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "reading": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "type": "string"
          },
          "noise": {
            "type": "boolean"
          }
        }
      },
      "example": {
        "fuel": {
          "value": 78.5,
          "reading": 125.25,
          "unit": "litre",
          "noise": true
        },
        "temperature": {
          "value": 33,
          "reading": 33,
          "unit": "celsius",
          "noise": false
        }
      }
    },
    "Accelerometer": {
      "additionalProperties": {
        "type": "integer",
        "format": "int32"
      },
      "example": {
        "breaking": 2,
        "cornering": 5
      }
    },
    "DeviceVendor": {
      "properties": {
        "id": {
          "type": "string",
          "example": "99"
        },
        "name": {
          "type": "string",
          "example": "Teltonika"
        },
        "supported": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "DeviceVendors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeviceVendor"
      }
    },
    "DeviceModel": {
      "properties": {
        "id": {
          "type": "string",
          "example": "218"
        },
        "name": {
          "type": "string",
          "example": "Teltonika FM1100"
        },
        "host": {
          "type": "string",
          "example": "78.128.4.67"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "example": 2009
        },
        "wdpPort": {
          "type": "integer",
          "format": "int32",
          "example": 2005
        },
        "type": {
          "type": "string",
          "example": "vehicle"
        },
        "idType": {
          "type": "string",
          "example": "imei"
        },
        "inputs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "analog_1",
            "board_voltage",
            "can_mileage"
          ]
        },
        "smsControl": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "tracking",
            "outputs"
          ]
        },
        "vendor": {
          "type": "string",
          "example": "Teltonika"
        },
        "vendorId": {
          "type": "string",
          "example": 99
        },
        "altitude": {
          "type": "boolean",
          "example": true
        },
        "satellites": {
          "type": "boolean",
          "example": true
        },
        "rS232Inputs": {
          "type": "integer",
          "format": "int32",
          "example": 0
        },
        "analogInputs": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "digitalInputs": {
          "type": "integer",
          "format": "int32",
          "example": 3
        },
        "digitalOutputs": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "supported": {
          "type": "boolean",
          "example": true
        },
        "gsmLevel": {
          "type": "boolean",
          "example": true
        },
        "gsmNetwork": {
          "type": "boolean",
          "example": true
        },
        "gsmRoaming": {
          "type": "boolean",
          "example": false
        },
        "hasChat": {
          "type": "boolean",
          "example": false
        },
        "hasPhone": {
          "type": "boolean",
          "example": true
        },
        "hasOdometer": {
          "type": "boolean",
          "example": true
        },
        "hasFuelInput": {
          "type": "boolean",
          "example": true
        },
        "hasLedControl": {
          "type": "boolean",
          "example": false
        },
        "hasHardwareKey": {
          "type": "boolean",
          "example": true
        },
        "hasMotionSensor": {
          "type": "boolean",
          "example": true
        },
        "hasAutoRegistration": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "DeviceModels": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeviceModel"
      }
    },
    "DeviceWatchingStatus": {
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        }
      }
    },
    "DeviceConfiguration": {
      "required": [
        "analogPortConfigs",
        "digitalPortConfigs"
      ],
      "properties": {
        "analogPortConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalogPortConfig"
          }
        },
        "digitalPortConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitalPortConfig"
          }
        }
      }
    },
    "PrimaryDeviceConfiguration": {
      "properties": {
        "binary": {
          "type": "boolean",
          "example": true,
          "description": "If value is false then **textMessage** is set\n"
        },
        "wdpPort": {
          "type": "integer",
          "format": "int32",
          "example": 2005
        },
        "textMessage": {
          "type": "string"
        },
        "binaryMessage": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "PrimaryDeviceConfigurations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PrimaryDeviceConfiguration"
      }
    },
    "Oplogs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Oplog"
      }
    },
    "Oplog": {
      "properties": {
        "user": {
          "type": "string",
          "example": "John Smith"
        },
        "type": {
          "type": "string",
          "example": "mount|unmount|changeLabel|changeMsisdn"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "label": "BT1234KK",
            "msisdn": "359123456789"
          }
        },
        "received": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        }
      }
    },
    "AnalogPortConfig": {
      "required": [
        "port",
        "type",
        "unit",
        "readings"
      ],
      "properties": {
        "port": {
          "type": "string",
          "example": "ext_temp_sensor_1"
        },
        "type": {
          "type": "string",
          "example": "temperature"
        },
        "unit": {
          "type": "string",
          "example": "celsius"
        },
        "noise": {
          "type": "boolean",
          "example": false
        },
        "min": {
          "type": "number",
          "format": "double",
          "example": -70
        },
        "max": {
          "type": "number",
          "format": "double",
          "example": 70
        },
        "multiplier": {
          "type": "number",
          "format": "double",
          "example": 3
        },
        "readings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdcReading"
          }
        }
      }
    },
    "DigitalPortConfig": {
      "required": [
        "port",
        "type"
      ],
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "type": {
          "type": "string",
          "example": "door"
        },
        "working": {
          "type": "boolean",
          "example": false
        },
        "inverse": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "AdcReading": {
      "required": [
        "value",
        "reading"
      ],
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "example": 27
        },
        "reading": {
          "type": "number",
          "format": "double",
          "example": 27
        }
      }
    },
    "NewCommandRequest": {
      "required": [
        "payload"
      ],
      "properties": {
        "payload": {
          "type": "string",
          "example": "getver"
        }
      }
    },
    "CommandRequest": {
      "properties": {
        "id": {
          "type": "string",
          "example": "5a714248a4294b7aeb984df7"
        },
        "tid": {
          "type": "string",
          "example": "593a9c4dafc78c57a8149fd6"
        },
        "payload": {
          "type": "string",
          "example": "getver"
        },
        "pending": {
          "type": "boolean",
          "example": false
        },
        "received": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "executed": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:31:00.155Z"
        }
      }
    },
    "CommandRequests": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CommandRequest"
      }
    },
    "CommandResponse": {
      "properties": {
        "id": {
          "type": "string",
          "example": "5a714248a4294b7aeb984df7"
        },
        "tid": {
          "type": "string",
          "example": "593a9c4dafc78c57a8149fd6"
        },
        "payload": {
          "type": "string",
          "example": "Code Ver:01.07.41 Rev:1 Device IMEI:356314748312344 Device ID:000006 Bootloader Ver:01.09 Modem APP Ver:TM11Q_R_01.03.05.01_002"
        },
        "received": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        }
      }
    },
    "CommandResponses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CommandResponse"
      }
    },
    "Alarm": {
      "properties": {
        "id": {
          "type": "string",
          "example": "599bc11c78882a0ed751a622"
        },
        "cid": {
          "type": "string",
          "example": "5749328048029696"
        },
        "label": {
          "type": "string",
          "example": "BT1234KK"
        },
        "type": {
          "type": "string",
          "example": "Idling"
        },
        "name": {
          "type": "string",
          "example": "Usage out of permitted period"
        },
        "address": {
          "type": "string",
          "example": "1801 Miranda Court, Kenai AK 99611"
        },
        "active": {
          "type": "boolean",
          "example": true
        },
        "inProgress": {
          "type": "boolean",
          "example": true
        },
        "firstMatch": {
          "type": "boolean",
          "example": true
        },
        "tObject": {
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "id": "593a9c4dafc78c57a8149fd6",
            "label": "BT1234KK",
            "type": "vehicle"
          }
        },
        "handled": {
          "type": "boolean",
          "example": false
        },
        "handledBy": {
          "type": "string",
          "example": "John Smith"
        },
        "handledOn": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        },
        "received": {
          "type": "string",
          "format": "date-time",
          "example": "2017-08-06T09:30:27.155Z"
        },
        "terminated": {
          "type": "string",
          "format": "date-time",
          "example": "2017-08-06T09:40:27.155Z"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "example": "2017-08-06T09:00:27.155Z"
        },
        "placeholder": {
          "type": "object"
        }
      }
    },
    "Alarms": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Alarm"
      }
    },
    "FuelChangeEvent": {
      "properties": {
        "id": {
          "type": "string",
          "example": "5a8658d678882a37fb7549a6"
        },
        "cid": {
          "type": "string",
          "example": "5749328048029696"
        },
        "unit": {
          "type": "string",
          "example": "litre"
        },
        "fuel": {
          "type": "number",
          "format": "double",
          "example": 5
        },
        "drain": {
          "type": "boolean",
          "example": false
        },
        "active": {
          "type": "boolean",
          "example": false
        },
        "tObject": {
          "type": "string",
          "example": "593a9c4dafc78c57a8149fd6"
        },
        "received": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        }
      }
    },
    "FuelChangeEvents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FuelChangeEvent"
      }
    },
    "Range": {
      "properties": {
        "from": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "to": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        }
      }
    },
    "LocationEvent": {
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T08:30:27.155Z"
        },
        "address": {
          "type": "string",
          "example": "221B Baker Street"
        },
        "mileage": {
          "type": "integer",
          "format": "int64",
          "example": 10000000
        },
        "location": {
          "$ref": "#/definitions/Location"
        }
      }
    },
    "AlarmReport": {
      "properties": {
        "alarms": {
          "$ref": "#/definitions/Alarms"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        }
      }
    },
    "AlarmReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AlarmReport"
      }
    },
    "FuelReport": {
      "properties": {
        "range": {
          "$ref": "#/definitions/Range"
        },
        "events": {
          "$ref": "#/definitions/FuelChangeEvents"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        }
      }
    },
    "FuelReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FuelReport"
      }
    },
    "StopsReport": {
      "properties": {
        "stops": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "example": "312b6cb4e2c9ee61b5b4583d/0"
              },
              "driverName": {
                "type": "string",
                "example": "John Smith"
              },
              "start": {
                "type": "string",
                "format": "date-time",
                "example": "2017-07-06T08:30:27.155Z"
              },
              "end": {
                "type": "string",
                "format": "date-time",
                "example": "2017-07-06T09:30:27.155Z"
              },
              "location": {
                "$ref": "#/definitions/LocationEvent"
              },
              "duration": {
                "type": "integer",
                "format": "int64",
                "example": 50000000
              }
            }
          }
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        },
        "totalDuration": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        }
      }
    },
    "StopsReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/StopsReport"
      }
    },
    "UsagePeriod": {
      "properties": {
        "mileage": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        }
      }
    },
    "UsageReport": {
      "properties": {
        "usage": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "example": "32511192e2c9ee61b5b14765/0"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2017-07-06T09:30:27.155Z"
              },
              "freeTime": {
                "$ref": "#/definitions/UsagePeriod"
              },
              "workingTime": {
                "$ref": "#/definitions/UsagePeriod"
              }
            }
          }
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        }
      }
    },
    "UsageReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UsageReport"
      }
    },
    "SummaryTrip": {
      "properties": {
        "id": {
          "type": "string",
          "example": "59512342e2c9ee61b5b21465/0"
        },
        "dist": {
          "type": "integer",
          "format": "int64",
          "example": 40000000
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T09:30:27.155Z"
        },
        "startMileage": {
          "type": "integer",
          "format": "int64",
          "example": 10000000
        },
        "endMileage": {
          "type": "integer",
          "format": "int64",
          "example": 20000000
        },
        "stopDuration": {
          "type": "integer",
          "format": "int64",
          "example": 10000000
        },
        "driveDuration": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        }
      }
    },
    "SummaryTrips": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SummaryTrip"
      }
    },
    "SummaryTripsReport": {
      "properties": {
        "trips": {
          "$ref": "#/definitions/SummaryTrips"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        },
        "startMileage": {
          "type": "integer",
          "format": "int64",
          "example": 10000000
        },
        "endMileage": {
          "type": "integer",
          "format": "int64",
          "example": 20000000
        },
        "totalDist": {
          "type": "integer",
          "format": "int64",
          "example": 4389
        },
        "totalStopDuration": {
          "type": "integer",
          "format": "int64",
          "example": 32497000000000
        },
        "totalDriveDuration": {
          "type": "integer",
          "format": "int64",
          "example": 1037000000000
        }
      }
    },
    "SummaryTripsReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SummaryTripsReport"
      }
    },
    "DetailedTrip": {
      "properties": {
        "id": {
          "type": "string",
          "example": "59512342e2c9ee61b5b21465/0"
        },
        "dist": {
          "type": "integer",
          "format": "int64",
          "example": 40000000
        },
        "driverName": {
          "type": "string",
          "example": "John Smith"
        },
        "inProgress": {
          "type": "boolean",
          "example": false
        },
        "start": {
          "$ref": "#/definitions/LocationEvent"
        },
        "end": {
          "$ref": "#/definitions/LocationEvent"
        },
        "driveDuration": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        },
        "stopDuration": {
          "type": "integer",
          "format": "int64",
          "example": 10000000
        }
      }
    },
    "DetailedTrips": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DetailedTrip"
      }
    },
    "DetailedTripsReport": {
      "properties": {
        "trips": {
          "$ref": "#/definitions/DetailedTrips"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        },
        "totalDist": {
          "type": "integer",
          "format": "int64",
          "example": 4389
        },
        "totalStopDuration": {
          "type": "integer",
          "format": "int64",
          "example": 32497000000000
        },
        "totalDriveDuration": {
          "type": "integer",
          "format": "int64",
          "example": 1037000000000
        }
      }
    },
    "DetailedTripsReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DetailedTripsReport"
      }
    },
    "DigitalInput": {
      "properties": {
        "id": {
          "type": "string",
          "example": "59512342e2c9ee61b5b21465/0"
        },
        "port": {
          "type": "string",
          "example": "door"
        },
        "start": {
          "$ref": "#/definitions/LocationEvent"
        },
        "stop": {
          "$ref": "#/definitions/LocationEvent"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": 50000000
        }
      }
    },
    "DigitalInputs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DigitalInput"
      }
    },
    "DigitalInputsReport": {
      "properties": {
        "inputs": {
          "$ref": "#/definitions/DigitalInputs"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "tobject": {
          "$ref": "#/definitions/TrackingObject"
        }
      }
    },
    "DigitalInputsReportByGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DigitalInputsReport"
      }
    },
    "GeoJSONCoordinatePair": {
      "type": "array",
      "items": {
        "type": "number",
        "format": "double"
      },
      "example": [
        23.206901550292972,
        42.71927257380149
      ]
    },
    "GeoJSONGeometry": {
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Circle",
            "Polygon"
          ]
        }
      }
    },
    "GeoJSONPolygon": {
      "required": [
        "type",
        "coordinates"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        }
      ],
      "properties": {
        "coordinates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeoJSONCoordinatePair"
          }
        }
      }
    },
    "GeoJSONCircle": {
      "required": [
        "type",
        "radius",
        "coordinates"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        }
      ],
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/GeoJSONCoordinatePair"
        },
        "radius": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GeoJSONProperties": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "GeoJSONFeature": {
      "required": [
        "type",
        "geometry",
        "properties"
      ],
      "properties": {
        "type": {
          "type": "string",
          "example": "Feature"
        },
        "geometry": {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        "properties": {
          "$ref": "#/definitions/GeoJSONProperties"
        }
      }
    },
    "ZoneRequest": {
      "required": [
        "feature"
      ],
      "properties": {
        "feature": {
          "$ref": "#/definitions/GeoJSONFeature"
        }
      }
    },
    "Zone": {
      "properties": {
        "id": {
          "type": "string",
          "example": "58d3bdb812345a47c30f0955"
        },
        "feature": {
          "$ref": "#/definitions/GeoJSONFeature"
        }
      }
    },
    "Zones": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Zone"
      }
    },
    "POIRequest": {
      "required": [
        "name",
        "tags"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "American College Arcus"
        },
        "refs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "ref1",
            "ref2"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "school",
            "students"
          ]
        },
        "marker": {
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "iconColor": "blue",
            "markerColor": "red"
          }
        },
        "expires": {
          "type": "boolean",
          "example": true
        },
        "expiry": {
          "type": "string",
          "format": "date-time"
        },
        "address": {
          "type": "string",
          "example": "ul. Dragoman 16, 5000 g.k. Varusha - north, Veliko Tarnovo"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "POI": {
      "properties": {
        "id": {
          "type": "string",
          "example": "596f4a8a71234a5280601617"
        },
        "name": {
          "type": "string",
          "example": "American College Arcus"
        },
        "refs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "ref1",
            "ref2"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "school",
            "students"
          ]
        },
        "marker": {
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "iconColor": "blue",
            "markerColor": "red"
          }
        },
        "expires": {
          "type": "boolean",
          "example": true
        },
        "expiry": {
          "type": "string",
          "format": "date-time"
        },
        "address": {
          "type": "string",
          "example": "ul. Dragoman 16, 5000 g.k. Varusha - north, Veliko Tarnovo"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "POIs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/POI"
      }
    },
    "Group": {
      "properties": {
        "id": {
          "type": "string",
          "example": "596f4a8a71234a5280601617"
        },
        "title": {
          "type": "string",
          "example": "GroupName"
        },
        "parentId": {
          "type": "string",
          "example": "596f4a8a78796a5280601616"
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": [
              "596f4a8a78796a5280601616",
              "596f4a8a71234a5280601617"
            ]
          }
        },
        "ancestors": {
          "type": "array",
          "items": {
            "type": "string",
            "example": [
              "596f4a8a78796a5280601616"
            ]
          }
        }
      }
    },
    "UnorderedGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Group"
      }
    },
    "GroupTree": {
      "additionalProperties": {
        "properties": {
          "id": {
            "type": "string",
            "example": "596f4a8a71234a5280601617"
          },
          "title": {
            "type": "string",
            "example": "Veliko Tarnovo"
          },
          "children": {
            "additionalProperties": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "children": {
                  "additionalProperties": {
                    "properties": null
                  }
                }
              }
            }
          }
        }
      },
      "example": {
        "596f4a8a71234a5280601617": {
          "id": "596f4a8a71234a5280601617",
          "title": "Veliko Tarnovo",
          "children": {
            "596f4a8a71234a5280601618": {
              "id": "596f4a8a71234a5280601618",
              "title": "CompanyName",
              "children": {
                "596f4a8a71234a5280601619": {
                  "id": "596f4a8a71234a5280601619",
                  "title": "Trucks",
                  "children": {}
                }
              }
            }
          }
        }
      }
    },
    "GroupRequest": {
      "required": [
        "title",
        "parentID"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "NewGroup"
        },
        "parentID": {
          "type": "string",
          "example": "596f4a8a71234a5280601617"
        }
      }
    },
    "UpdateGroupRequest": {
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "NewGroup"
        }
      }
    },
    "DriverRequest": {
      "required": [
        "firstName",
        "lastName",
        "selection",
        "tokens"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Smith"
        },
        "selection": {
          "required": [
            "groups",
            "tobjects"
          ],
          "properties": {
            "groups": {
              "$ref": "#/definitions/GroupIDs"
            },
            "tobjects": {
              "$ref": "#/definitions/TrackingObjectIDs"
            }
          }
        },
        "tokens": {
          "$ref": "#/definitions/AuthTokens"
        }
      }
    },
    "DriverResponse": {
      "properties": {
        "id": {
          "type": "string",
          "example": "51238acc75782a48bda12bbc"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Smith"
        },
        "tokens": {
          "$ref": "#/definitions/AuthTokens"
        },
        "selection": {
          "properties": {
            "groups": {
              "$ref": "#/definitions/GroupIDs"
            },
            "tobjects": {
              "$ref": "#/definitions/TrackingObjectIDs"
            }
          }
        }
      }
    },
    "Drivers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DriverResponse"
      }
    },
    "MaintenanceTaskRequest": {
      "required": [
        "name",
        "description",
        "cost",
        "emails",
        "tObject"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Oil change"
        },
        "description": {
          "type": "string",
          "example": "Oil should be changed"
        },
        "cost": {
          "type": "number",
          "format": "float",
          "example": 55.4
        },
        "emails": {
          "$ref": "#/definitions/MaintenanceEmails"
        },
        "tObject": {
          "$ref": "#/definitions/MaintenanceTaskTarget"
        },
        "scheduleOn": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T09:30:27.155Z"
        },
        "targetMileage": {
          "type": "int",
          "format": "int64",
          "example": 156000
        }
      }
    },
    "MaintenanceTask": {
      "properties": {
        "id": {
          "type": "string",
          "example": "7938f84b12345a21a1dcedfc"
        },
        "name": {
          "type": "string",
          "example": "Oil change"
        },
        "description": {
          "type": "string",
          "example": "Oil should be changed"
        },
        "cost": {
          "type": "number",
          "format": "float",
          "example": 55.4
        },
        "emails": {
          "$ref": "#/definitions/MaintenanceEmails"
        },
        "tObject": {
          "$ref": "#/definitions/MaintenanceTaskTarget"
        },
        "scheduleOn": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-06T09:30:27.155Z"
        },
        "targetMileage": {
          "type": "int",
          "format": "int64",
          "example": 156000
        }
      }
    },
    "MaintenanceTasks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MaintenanceTask"
      }
    },
    "MaintenanceEmails": {
      "type": "array",
      "items": {
        "type": "string",
        "format": "email",
        "example": "email@email.com"
      }
    },
    "MaintenanceTaskTarget": {
      "properties": {
        "id": {
          "type": "string",
          "example": "7938f84b12345a21a1dcedfc"
        },
        "label": {
          "type": "string",
          "example": "BT2525KA"
        }
      }
    },
    "ConfigTemplate": {
      "properties": {
        "id": {
          "type": "string",
          "example": "5938f84b12345a21a1dcedfe"
        },
        "cid": {
          "type": "string",
          "example": "5749328048029696"
        },
        "name": {
          "type": "string",
          "example": "Template name"
        },
        "device": {
          "$ref": "#/definitions/DeviceTemplate"
        },
        "smsCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMSTemplate"
          }
        },
        "gprsCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GPRSTemplate"
          }
        },
        "analogPortConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalogPortConfig"
          }
        },
        "digitalPortConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitalPortConfig"
          }
        }
      }
    },
    "ConfigTemplates": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ConfigTemplate"
      }
    },
    "ConfigTemplateRequest": {
      "required": [
        "name",
        "device",
        "smsCommands",
        "gprsCommands",
        "analogPortConfigs",
        "digitalPortConfigs"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Template name"
        },
        "device": {
          "$ref": "#/definitions/DeviceTemplate"
        },
        "smsCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMSTemplate"
          }
        },
        "gprsCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GPRSTemplate"
          }
        },
        "analogPortConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalogPortConfig"
          }
        },
        "digitalPortConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DigitalPortConfig"
          }
        }
      }
    },
    "DeviceTemplate": {
      "required": [
        "type",
        "modelId",
        "modelName",
        "vendorId"
      ],
      "properties": {
        "type": {
          "type": "string",
          "example": "vehicle"
        },
        "modelId": {
          "type": "string",
          "example": "216"
        },
        "modelName": {
          "type": "string",
          "example": "Teltonika FMA120"
        },
        "vendorId": {
          "type": "string",
          "example": "99"
        }
      }
    },
    "SMSTemplate": {
      "required": [
        "binary",
        "message"
      ],
      "properties": {
        "binary": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "command / base64"
        }
      }
    },
    "GPRSTemplate": {
      "required": [
        "payload"
      ],
      "properties": {
        "payload": {
          "type": "string",
          "example": "command"
        }
      }
    },
    "AlarmConfigRequest": {
      "required": [
        "type",
        "name",
        "rule",
        "filters",
        "selection"
      ],
      "properties": {
        "type": {
          "type": "string",
          "example": "idling",
          "description": "One of:\n  - idling\n  - zoneExit\n  - zoneEntrance\n  - lostGpsSignal\n  - motionDetection\n  - overspeed\n  - engineOverspeed\n  - driverChange\n  - identifiedDriver\n  - digitalInputState\n  - analogInputInRange\n  - unidentifiedDriver\n  - doorAction\n  - panicButton\n  - overnightStayOutsideGarage\n  - usageOutOfPermittedPeriod\n"
        },
        "name": {
          "type": "string",
          "example": "Exit out of Veliko Tarnovo"
        },
        "selection": {
          "required": [
            "groups",
            "tobjects"
          ],
          "properties": {
            "groups": {
              "$ref": "#/definitions/GroupIDs"
            },
            "tobjects": {
              "$ref": "#/definitions/TrackingObjectIDs"
            }
          }
        },
        "rule": {
          "type": "object",
          "description": "One of the following definitions:\n  - IdlingAlarmRule\n  - ZoneExitAlarmRule\n  - ZoneEntranceAlarmRule\n  - LostGpsSignalAlarmRule\n  - MotionDetectionAlarmRule\n  - OverspeedAlarmRule\n  - EngineOverspeedAlarmRule\n  - DriverChangeAlarmRule\n  - IdentifiedDriverAlarmRule\n  - DigitalInputStateAlarmRule\n  - AnalogInputInRangeAlarmRule\n  - UnidentifiedDriverAlarmRule\n  - DoorActionAlarmRule\n  - PanicButtonAlarmRule\n  - OvernightStayOutsideGarageAlarmRule\n  - UsageOutOfPermittedPeriodAlarmRule\n"
        },
        "filters": {
          "$ref": "#/definitions/AlarmFilters"
        }
      }
    },
    "IdlingAlarmRule": {
      "type": "object"
    },
    "ZoneExitAlarmRule": {
      "required": [
        "keyOff"
      ],
      "properties": {
        "keyOff": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ZoneEntranceAlarmRule": {
      "required": [
        "keyOff"
      ],
      "properties": {
        "keyOff": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "LostGpsSignalAlarmRule": {
      "required": [
        "keyOn"
      ],
      "properties": {
        "keyOn": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "MotionDetectionAlarmRule": {
      "type": "object"
    },
    "OverspeedAlarmRule": {
      "required": [
        "maxSpeed"
      ],
      "properties": {
        "maxSpeed": {
          "type": "integer",
          "format": "int32",
          "example": 100
        }
      }
    },
    "EngineOverspeedAlarmRule": {
      "required": [
        "maxRpm"
      ],
      "properties": {
        "maxRpm": {
          "type": "number",
          "format": "double",
          "example": 2000
        }
      }
    },
    "DriverChangeAlarmRule": {
      "type": "object"
    },
    "IdentifiedDriverAlarmRule": {
      "type": "object"
    },
    "DigitalInputStateAlarmRule": {
      "required": [
        true,
        "input",
        "message"
      ],
      "properties": {
        "true": {
          "type": "boolean",
          "example": true
        },
        "input": {
          "type": "string",
          "example": {
            "oneOf": [
              "door",
              "ignition",
              "panicButton",
              "externalPower"
            ]
          }
        },
        "message": {
          "type": "string",
          "example": "message"
        }
      }
    },
    "AnalogInputInRangeAlarmRule": {
      "required": [
        "input",
        "insideBoundary"
      ],
      "properties": {
        "input": {
          "type": "string",
          "example": {
            "oneOf": [
              "rpm",
              "fuel",
              "temperature",
              "externalPower"
            ]
          }
        },
        "insideBoundary": {
          "type": "boolean",
          "example": true
        },
        "min": {
          "type": "number",
          "format": "double",
          "example": 20
        },
        "max": {
          "type": "number",
          "format": "double",
          "example": 30
        }
      }
    },
    "UnidentifiedDriverAlarmRule": {
      "type": "object"
    },
    "DoorActionAlarmRule": {
      "required": [
        "close"
      ],
      "properties": {
        "close": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "PanicButtonAlarmRule": {
      "type": "object"
    },
    "OvernightStayOutsideGarageAlarmRule": {
      "type": "object"
    },
    "UsageOutOfPermittedPeriodAlarmRule": {
      "type": "object"
    },
    "GeoAlarmFilter": {
      "properties": {
        "insideZones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "58d3bdb812345a47c30f0143",
            "58d3bdb812345a47c30f0144"
          ]
        },
        "outsideZones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "58d3bdb812345a47c30f0144",
            "58d3bdb812345a47c30f0145"
          ]
        }
      }
    },
    "DelayAlarmFilter": {
      "properties": {
        "minutes": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      }
    },
    "AlarmFilters": {
      "properties": {
        "geo": {
          "$ref": "#/definitions/GeoAlarmFilter"
        },
        "delay": {
          "$ref": "#/definitions/DelayAlarmFilter"
        }
      }
    },
    "AlarmConfigResponse": {
      "properties": {
        "id": {
          "type": "string",
          "example": "5938f84b12345a21a1dcedfe"
        },
        "cid": {
          "type": "string",
          "example": "5749328048029696"
        },
        "type": {
          "type": "string",
          "example": "zoneExit"
        },
        "name": {
          "type": "string",
          "example": "Exit out of Veliko Tarnovo"
        },
        "rule": {
          "type": "object",
          "description": "One of the following definitions:\n  - IdlingAlarmRule\n  - ZoneExitAlarmRule\n  - ZoneEntranceAlarmRule\n  - LostGpsSignalAlarmRule\n  - MotionDetectionAlarmRule\n  - OverspeedAlarmRule\n  - EngineOverspeedAlarmRule\n  - DriverChangeAlarmRule\n  - IdentifiedDriverAlarmRule\n  - DigitalInputStateAlarmRule\n  - AnalogInputInRangeAlarmRule\n  - UnidentifiedDriverAlarmRule\n  - DoorActionAlarmRule\n  - PanicButtonAlarmRule\n  - OvernightStayOutsideGarageAlarmRule\n  - UsageOutOfPermittedPeriodAlarmRule\n"
        },
        "filters": {
          "$ref": "#/definitions/AlarmFilters"
        },
        "groups": {
          "$ref": "#/definitions/GroupIDs"
        },
        "tObjects": {
          "$ref": "#/definitions/TrackingObjectIDs"
        },
        "suspended": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "AlarmConfig": {
      "properties": {
        "id": {
          "type": "string",
          "example": "5938f84b12345a21a1dcedfe"
        },
        "type": {
          "type": "string",
          "example": "zoneExit"
        },
        "name": {
          "type": "string",
          "example": "Exit out of Veliko Tarnovo"
        },
        "rule": {
          "type": "object",
          "description": "One of the following definitions:\n  - IdlingAlarmRule\n  - ZoneExitAlarmRule\n  - ZoneEntranceAlarmRule\n  - LostGpsSignalAlarmRule\n  - MotionDetectionAlarmRule\n  - OverspeedAlarmRule\n  - EngineOverspeedAlarmRule\n  - DriverChangeAlarmRule\n  - IdentifiedDriverAlarmRule\n  - DigitalInputStateAlarmRule\n  - AnalogInputInRangeAlarmRule\n  - UnidentifiedDriverAlarmRule\n  - DoorActionAlarmRule\n  - PanicButtonAlarmRule\n  - OvernightStayOutsideGarageAlarmRule\n  - UsageOutOfPermittedPeriodAlarmRule\n"
        },
        "filters": {
          "$ref": "#/definitions/AlarmFilters"
        },
        "selection": {
          "properties": {
            "groups": {
              "$ref": "#/definitions/GroupIDs"
            },
            "tobjects": {
              "$ref": "#/definitions/TrackingObjectIDs"
            }
          }
        },
        "suspended": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "AlarmConfigs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AlarmConfig"
      }
    },
    "Workday": {
      "properties": {
        "start": {
          "type": "string",
          "example": "08:30"
        },
        "end": {
          "type": "string",
          "example": "18:00"
        }
      }
    },
    "Workweek": {
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ],
      "properties": {
        "monday": {
          "$ref": "#/definitions/Workday"
        },
        "tuesday": {
          "$ref": "#/definitions/Workday"
        },
        "wednesday": {
          "$ref": "#/definitions/Workday"
        },
        "thursday": {
          "$ref": "#/definitions/Workday"
        },
        "friday": {
          "$ref": "#/definitions/Workday"
        },
        "saturday": {
          "$ref": "#/definitions/Workday"
        },
        "sunday": {
          "$ref": "#/definitions/Workday"
        }
      }
    },
    "EcodrivingConfig": {
      "required": [
        "idling",
        "overspeed",
        "harshDriving"
      ],
      "properties": {
        "idling": {
          "properties": {
            "points": {
              "type": "float",
              "example": 5
            },
            "duration": {
              "type": "integer",
              "example": 5
            }
          }
        },
        "overspeed": {
          "properties": {
            "limit": {
              "type": "integer",
              "example": 100
            },
            "penalties": {
              "type": "array",
              "items": {
                "properties": {
                  "points": {
                    "type": "float",
                    "example": 5
                  },
                  "overrun": {
                    "type": "integer",
                    "example": 20
                  }
                }
              }
            },
            "maxPoints": {
              "type": "float",
              "example": 75
            }
          }
        },
        "harshDriving": {
          "properties": {
            "braking": {
              "type": "float",
              "example": 5
            },
            "cornering": {
              "type": "float",
              "example": 5
            },
            "acceleration": {
              "type": "float",
              "example": 5
            }
          }
        }
      }
    },
    "VehicleTypes": {
      "type": "array",
      "items": {
        "properties": {
          "id": {
            "type": "string",
            "example": "00"
          },
          "name": {
            "type": "string",
            "example": "cars"
          }
        }
      },
      "example": [
        {
          "id": "00",
          "name": "cars"
        },
        {
          "id": "01",
          "name": "jeeps"
        },
        {
          "id": "02",
          "name": "vans"
        },
        {
          "id": "03",
          "name": "trucks"
        }
      ]
    },
    "VehicleManufacturer": {
      "properties": {
        "id": {
          "type": "string",
          "example": "0007"
        },
        "name": {
          "type": "string",
          "example": "BMW"
        },
        "type": {
          "type": "string",
          "example": "cars"
        }
      }
    },
    "VehicleManufacturers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/VehicleManufacturer"
      }
    },
    "VehicleModel": {
      "properties": {
        "id": {
          "type": "string",
          "example": "000795"
        },
        "name": {
          "type": "string",
          "example": "i8"
        },
        "type": {
          "type": "string",
          "example": "cars"
        },
        "manufacturer": {
          "type": "string",
          "example": "BMW"
        }
      }
    },
    "VehicleModels": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/VehicleModel"
      }
    },
    "MobileCarrier": {
      "properties": {
        "id": {
          "type": "string",
          "example": "0136"
        },
        "name": {
          "type": "string",
          "example": "BG - Vivacom"
        },
        "apnName": {
          "type": "string",
          "example": "internet.vivacom.bg"
        },
        "apnUsername": {
          "type": "string",
          "example": "VIVACOM"
        },
        "apnPassword": {
          "type": "string",
          "example": "VIVACOM"
        }
      }
    },
    "MobileCarriers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MobileCarrier"
      }
    },
    "BigQueryCredentials": {
      "properties": {
        "json": {
          "type": "string",
          "example": {}
        },
        "dataset": {
          "type": "string",
          "example": "dataset-1"
        }
      }
    },
    "EcodrivingRatings": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "example": "123456ed78882a5d7cdb169c"
              },
              "name": {
                "type": "string",
                "example": "John Smith"
              },
              "rating": {
                "type": "number",
                "format": "double",
                "example": 29.374363559595665
              },
              "mileage": {
                "type": "integer",
                "format": "int32",
                "example": 1006575
              },
              "isDriver": {
                "type": "boolean",
                "example": true
              },
              "penalties": {
                "additionalProperties": {
                  "type": "number",
                  "format": "double"
                },
                "example": {
                  "acceleration": 175,
                  "braking": 110,
                  "cornering": 55,
                  "idling": 44.952407746049616,
                  "overspeed": 51.33333333333333
                }
              },
              "occurrences": {
                "additionalProperties": {
                  "type": "number",
                  "format": "double"
                },
                "example": {
                  "acceleration": 22,
                  "braking": 10,
                  "cornering": 4,
                  "idling": 62,
                  "overspeed": 15
                }
              },
              "penaltiesPercentage": {
                "additionalProperties": {
                  "type": "number",
                  "format": "double"
                },
                "example": {
                  "acceleration": 24.61668307778872,
                  "braking": 15.473343648895769,
                  "cornering": 7.7366718244478845,
                  "idling": 44.952407746049616,
                  "overspeed": 7.220893702818025
                }
              },
              "penaltyPoints": {
                "type": "number",
                "format": "double",
                "example": 710.8999999999999
              }
            }
          }
        },
        "summary": {
          "properties": {
            "rating": {
              "type": "number",
              "format": "double",
              "example": 16.722585019758895
            },
            "mileage": {
              "type": "integer",
              "format": "int32",
              "example": 10810485
            },
            "objects": {
              "type": "integer",
              "format": "int32",
              "example": 25
            },
            "penalties": {
              "additionalProperties": {
                "type": "number",
                "format": "double"
              },
              "example": {
                "acceleration": 8240,
                "braking": 2475,
                "cornering": 2250,
                "idling": 170294.8716666667,
                "overspeed": 12548.198500000006
              }
            },
            "occurrences": {
              "additionalProperties": {
                "type": "number",
                "format": "double"
              },
              "example": {
                "acceleration": 821,
                "braking": 269,
                "cornering": 225,
                "idling": 16856,
                "overspeed": 710
              }
            },
            "penaltiesPercentage": {
              "additionalProperties": {
                "type": "number",
                "format": "double"
              },
              "example": {
                "acceleration": 24.46167801616308,
                "braking": 10.96194376364184,
                "cornering": 11.65140995947326,
                "idling": 39.33873950652269,
                "overspeed": 13.673260956113841
              }
            },
            "penaltyPoints": {
              "type": "number",
              "format": "double",
              "example": 195808.0701666667
            }
          }
        }
      }
    },
    "MobileTrackerInvitationRequest": {
      "required": [
        "to"
      ],
      "properties": {
        "to": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "User": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "groups": {
          "$ref": "#/definitions/GroupIDs"
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "UserGroupAssignRequest": {
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "$ref": "#/definitions/GroupIDs"
        }
      }
    },
    "UpdateMapConfigsRequest": {
      "required": [
        "groupFilter",
        "searchFilter",
        "trackingObjectFilter"
      ],
      "properties": {
        "groupFilter": {
          "$ref": "#/definitions/GroupIDs"
        },
        "searchFilter": {
          "required": [
            "pois",
            "zones",
            "tobjects"
          ],
          "properties": {
            "pois": {
              "type": "boolean",
              "example": true
            },
            "zones": {
              "type": "boolean",
              "example": true
            },
            "tobjects": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "trackingObjectFilter": {
          "required": [
            "hideLost",
            "workingOn",
            "workingOff"
          ],
          "properties": {
            "hideLost": {
              "type": "boolean",
              "example": false
            },
            "workingOn": {
              "type": "boolean",
              "example": true
            },
            "workingOff": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NotFoundError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Not Found"
        }
      }
    },
    "JsonSyntaxError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Problems parsing JSON"
        }
      }
    },
    "AuthorizationError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Unauthorized"
        }
      }
    },
    "RequestEntityTooLargeError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Request Entity Too Large"
        }
      }
    },
    "InternalServerError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "TrackingObjectActivationError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "alreadyUsedTrackingId",
              "message": "The provided TrackingID is already used."
            },
            {
              "code": "alreadyUsedMsisdn",
              "message": "The provided MSISDN is already used."
            },
            {
              "code": "missingField",
              "field": "label"
            },
            {
              "code": "missingField",
              "field": "type"
            },
            {
              "code": "missingField",
              "field": "trackingId"
            },
            {
              "code": "invalid",
              "field": "trackingId"
            },
            {
              "code": "missingField",
              "field": "msisdn"
            },
            {
              "code": "invalid",
              "field": "msisdn"
            },
            {
              "code": "missingField",
              "field": "deviceModel"
            }
          ]
        }
      }
    },
    "MobileTrackingObjectActivationError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "alreadyUsedTrackingId",
              "message": "The provided TrackingID is already used."
            },
            {
              "code": "alreadyUsedMsisdn",
              "message": "The provided MSISDN is already used."
            },
            {
              "code": "missingField",
              "field": "label"
            },
            {
              "code": "missingField",
              "field": "trackingId"
            },
            {
              "code": "invalid",
              "field": "trackingId"
            }
          ]
        }
      }
    },
    "DeviceConfigurationError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "analogPortConfigs"
            },
            {
              "code": "missingField",
              "field": "digitalPortConfigs"
            }
          ]
        }
      }
    },
    "TrackingIdChangeError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "alreadyUsedTrackingId",
              "message": "The provided TrackingID is already used."
            },
            {
              "code": "missingField",
              "field": "trackingId"
            }
          ]
        }
      }
    },
    "MsisdnChangeError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "alreadyUsedMsisdn",
              "message": "The provided MSISDN is already used."
            },
            {
              "code": "missingField",
              "field": "msisdn"
            }
          ]
        }
      }
    },
    "MileageChangeError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "mileage"
            }
          ]
        }
      }
    },
    "CommandCreateError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "payload"
            }
          ]
        }
      }
    },
    "ZoneCreateError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "feature.geometry"
            },
            {
              "code": "missingField",
              "field": "feature.geometry.coordinates"
            },
            {
              "code": "missingField",
              "field": "feature.geometry.type"
            },
            {
              "code": "missingField",
              "field": "feature.geometry.radius"
            },
            {
              "code": "missingField",
              "field": "feature"
            },
            {
              "code": "missingField",
              "field": "feature.type"
            },
            {
              "code": "missingField",
              "field": "feature.properties"
            },
            {
              "code": "missingField",
              "field": "feature.properties.name"
            }
          ]
        }
      }
    },
    "ZoneAssignedError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "hasAlarmConfig",
              "message": "You cannot remove a zone assigned to an alarm configuration."
            }
          ]
        }
      }
    },
    "POIRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "name"
            },
            {
              "code": "missingField",
              "field": "tags"
            }
          ]
        }
      }
    },
    "TrackingObjectGroupAssignError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "groupNotFound",
              "message": "The provided group is not found."
            }
          ]
        }
      }
    },
    "HistoryNotFoundError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "historyNotFound",
              "message": "No history found for the specified period."
            }
          ]
        }
      }
    },
    "GroupCreateError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "title"
            },
            {
              "code": "missingField",
              "field": "parentID"
            },
            {
              "code": "parentGroupNotFound",
              "message": "The provided parent group is not found."
            }
          ]
        }
      }
    },
    "GroupUpdateError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "title"
            }
          ]
        }
      }
    },
    "GroupDeleteError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "hasGroupChildren",
              "message": "You cannot remove a group with a group children."
            },
            {
              "code": "hasTobjectChildren",
              "message": "You cannot remove a group with a tracking object children."
            }
          ]
        }
      }
    },
    "DriverRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "firstName"
            },
            {
              "code": "missingField",
              "field": "lastName"
            },
            {
              "code": "missingField",
              "field": "selection"
            },
            {
              "code": "missingField",
              "field": "selection.tobjects"
            },
            {
              "code": "invalid",
              "field": "selection.tobjects[0]"
            },
            {
              "code": "missingField",
              "field": "selection.groups"
            },
            {
              "code": "invalid",
              "field": "selection.groups[0]"
            },
            {
              "code": "missingField",
              "field": "tokens"
            }
          ]
        }
      }
    },
    "MaintenanceTaskRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "tObject"
            },
            {
              "code": "missingField",
              "field": "emails"
            },
            {
              "code": "missingField",
              "field": "title"
            },
            {
              "code": "missingField",
              "field": "description"
            },
            {
              "code": "missingField",
              "field": "cost"
            }
          ]
        }
      }
    },
    "ConfigTemplateRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "name"
            },
            {
              "code": "missingField",
              "field": "device"
            },
            {
              "code": "missingField",
              "field": "smsCommands"
            },
            {
              "code": "missingField",
              "field": "gprsCommands"
            },
            {
              "code": "missingField",
              "field": "analogPortConfigs"
            },
            {
              "code": "missingField",
              "field": "digitalPortConfigs"
            }
          ]
        }
      }
    },
    "AlarmConfigRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "type"
            },
            {
              "code": "missingField",
              "field": "name"
            },
            {
              "code": "missingField",
              "field": "filters"
            },
            {
              "code": "missingField",
              "field": "selection"
            },
            {
              "code": "missingField",
              "field": "selection.groups"
            },
            {
              "code": "missingField",
              "field": "selection.tobjects"
            }
          ]
        }
      }
    },
    "WorkweekRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "monday"
            },
            {
              "code": "missingField",
              "field": "tuesday"
            },
            {
              "code": "missingField",
              "field": "wednesday"
            },
            {
              "code": "missingField",
              "field": "thursday"
            },
            {
              "code": "missingField",
              "field": "friday"
            },
            {
              "code": "missingField",
              "field": "saturday"
            },
            {
              "code": "missingField",
              "field": "sunday"
            }
          ]
        }
      }
    },
    "EcodrivingConfigRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "idling"
            },
            {
              "code": "missingField",
              "field": "overspeed"
            },
            {
              "code": "missingField",
              "field": "harshDriving"
            }
          ]
        }
      }
    },
    "MobileTrackerInvitationRequestError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "invalid",
              "field": "to"
            }
          ]
        }
      }
    },
    "UserGroupAssignError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "groups"
            }
          ]
        }
      }
    },
    "UpdateMapConfigsError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "groupFilter"
            },
            {
              "code": "missingField",
              "field": "searchFilter"
            },
            {
              "code": "missingField",
              "field": "trackingObjectFilter"
            },
            {
              "code": "missingField",
              "field": "searchFilter.pOIs"
            },
            {
              "code": "missingField",
              "field": "searchFilter.zones"
            },
            {
              "code": "missingField",
              "field": "searchFilter.tobjects"
            },
            {
              "code": "missingField",
              "field": "trackingObjectFilter.hideLost"
            },
            {
              "code": "missingField",
              "field": "trackingObjectFilter.workingOn"
            },
            {
              "code": "missingField",
              "field": "trackingObjectFilter.workingOff"
            }
          ]
        }
      }
    },
    "BigQueryCredentialsError": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "example": [
            {
              "code": "missingField",
              "field": "json"
            },
            {
              "code": "invalid",
              "field": "json"
            },
            {
              "code": "missingField",
              "field": "dataset"
            }
          ]
        }
      }
    },
    "SearchEngineSuggestions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SearchEngineSuggestion"
      }
    },
    "SearchEngineSuggestion": {
      "properties": {
        "id": {
          "type": "string",
          "example": "588068ecf99c9601db4133a2",
          "description": "ID of the suggested resource."
        },
        "type": {
          "type": "string",
          "example": "tobject/vehicle",
          "description": "Type of the suggested resource."
        },
        "label": {
          "type": "string",
          "example": "BT1234KK",
          "description": "Label of the suggested resource."
        }
      }
    },
    "SearchEngineResult": {
      "properties": {
        "tobjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrackingObject"
          }
        },
        "pois": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/POI"
          }
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Zone"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "suggestion": {
          "$ref": "#/definitions/SearchEngineSuggestion"
        }
      }
    }
  }
}
